STYLE POLICE:
{
    Methods are pascal case
    Properties/attributes in CFC's are pascal cased
    Variables in methods, functions and cfm's are pascal cased
    Method/function arguments are camel cased
}

Refactor the image logic to use the new structure (from db instead of disk)
- Controllers/ChangeRecipePicture.cfc
- Components/ImageManager.cfc
- Views/ChangeRecipePicture.cfm
- Modules/RecipeImageDownloader.cfm

Replace structNew and arrayNew calls with modern versions

For the datatable AJAX call make a view that parses the output from Controllers/GetRecipeListDataFull into its display state

Remove all cfprocessingdirective-tags

Remove createObject() calls with new

Fix applying filters to the recipe list
Fix changing user settings (both of them)
Put labels around checkboxes so you can click on the name

Refactor FilterSettings
- Make them their own component rather than just pasted inside User.cfc as a struct

Since controllers have no state and only have one method (main) consider making them static
...and rename the main-method to something cooler >:)

Figure out how to automagically install SQLite on application start if not already installed

Long term: remove jQuery
Longer term: refactor JS
Long term: switch to cfscript in components

ACTIONS FOR GO-LIVE:

- Do functional testing of the master branch:
    - Logging in
    - Changing settings
    - Listing/filtering recipes
    - Opening existing recipe
    - Creating a new recipe
    - Editing a recipe
    - Deleting a recipe
- Wipe the database on master so it's clean
- Create import script to convert and import recipes from the old db into the new
- Create a suite of regression tests on the dev-branch (.NET nUnit test suite)

// https://cfdocs.org/security-authentication
// https://cfdocs.org/security-session-management
// https://www.petefreitag.com/item/901.cfm
// https://www.petefreitag.com/item/913.cfm